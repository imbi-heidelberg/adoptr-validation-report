)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
datadist <- Student(two_armed=TRUE)
H_0 <- PointMassPrior(.0,1)
prior <- PointMassPrior(1.2,1)
alpha <- 0.025
min_power <- 0.8
toer_cnstr <- Power(datadist,H_0)<= alpha
pow_cnstr <- Power(datadist,prior) >= min_power
ess <- ExpectedSampleSize(datadist,prior)
tbl_designs <- tibble(
type    = c("one-stage", "group-sequential", "two-stage"),
initial = list(
OneStageDesign(20, 2.0),
rpact_design(datadist, 1.2, 0.025, 0.8, TRUE, order),
TwoStageDesign(rpact_design(datadist, 1.2, 0.025, 0.8, TRUE, order))) )
library(tidyverse)
tbl_designs <- tibble(
type    = c("one-stage", "group-sequential", "two-stage"),
initial = list(
OneStageDesign(20, 2.0),
rpact_design(datadist, 1.2, 0.025, 0.8, TRUE, order),
TwoStageDesign(rpact_design(datadist, 1.2, 0.025, 0.8, TRUE, order))) )
order <- 7L
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else if (is(dist,"Student")) {
print("Hello Hello")
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
if(is(dist,"Student")){
print("Hello hello")
}
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
if(is(dist,"Normal")){
print("Hello hello")
}
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
if(is(dist,"Student")){
print("Hello hello")
}
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if(is(dist,"Student")){
print("Hello hello")
}
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if(is(dist,"Student")){
print("Hello hello")
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
}
else if(is(dist,"Student")){
print("Hello hello")
}
else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
}
else {
break("Specified data distribution does not exist in adoptr!")
}
else if(is(dist,"Student")){
print("Hello hello")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
}
else {
break("Specified data distribution does not exist in adoptr!")
}
if(is(dist,"Student")){
print("Hello hello")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
library(rpact)
