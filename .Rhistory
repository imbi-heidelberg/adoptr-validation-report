design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if(is(dist,"Student")){
print("Hello hello")
}
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
} else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if(is(dist,"Student")){
print("Hello hello")
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
} else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
}
else if(is(dist,"Student")){
print("Hello hello")
}
else {
break("Specified data distribution does not exist in adoptr!")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
}
else {
break("Specified data distribution does not exist in adoptr!")
}
else if(is(dist,"Student")){
print("Hello hello")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design <- function(
dist, effect, sig.level = 0.025, power = 0.8, two_armed = TRUE, order = 5L) {
design_rp <- rpact::getDesignInverseNormal(
kMax = 2,
alpha = sig.level,
beta = 1 - power,
futilityBounds = 0,
typeOfDesign = "P"
)
if (is(dist, "Normal")) {
res <- rpact::getSampleSizeMeans(
design_rp, normalApproximation = TRUE, alternative = effect * ifelse(
two_armed, 1, sqrt(2)
)
)
}
else if (is(dist, "Binomial")) {
res <- rpact::getSampleSizeRates(
design_rp, groups = 2, normalApproximation = TRUE,
pi1 = dist@rate_control, pi2 = dist@rate_control + effect
)
}
else {
break("Specified data distribution does not exist in adoptr!")
}
if(is(dist,"Student")){
print("Hello hello")
}
char <- rpact::getDesignCharacteristics(design_rp)
n1 <- res$numberOfSubjects1[1,]
n2 <- res$numberOfSubjects1[2,]
c2_rp <- function(z){
w1 <- 1 / sqrt(2)
w2 <- sqrt(1 - w1^2)
out <- (design_rp$criticalValues[2] - w1 * z) / w2
return(out)
}
c1f <- ifelse(is(dist, "Normal"), stats::qnorm(char$futilityProbabilities) +
sqrt(res$numberOfSubjects1[1]) * effect / ifelse(two_armed, sqrt(2), 1),
design_rp$futilityBounds)
c1e <- design_rp$criticalValues[1]
rpact_design <- adoptr::GroupSequentialDesign(
ceiling(n1),
c1f,
c1e,
ceiling(n2),
rep(2.0, order)
)
rpact_design@c2_pivots <- sapply(adoptr:::scaled_integration_pivots(rpact_design), c2_rp)
return(rpact_design)
}
rpact_design(datadist,1.2,.025,.8,TRUE,order)
library(rpact)
install.packages(c(
"adoptr",
"tidyverse",
"bookdown",
"rpact",
"testthat",
"pwr" ) )
install.packages(bookdown)
install.packages("bookdown")
library(adoptr)
library(adoptr)
datadist <- Normal(two_armed=TRUE)
H_0 <- PointMassPrior(.0,1)
prior <- PointMassPrior(0.5,1)
alpha <- 0.05
min_power <- 0.8
toer_cnstr <- Power(datadist,H_0) <= alpha
pow_cnstr <- Power(datadist,prior) >= min_power
ess <- ExpectedSampleSize(datadist,prior)
init_onestage <- OneStageDesign(100,2)
opt_onestage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_onestage)
opt_onestage$design
datadist <- Normal(two_armed=TRUE)
H_0 <- PointMassPrior(.0,1)
prior <- PointMassPrior(0.5,1)
alpha <- 0.05
min_power <- 0.9
toer_cnstr <- Power(datadist,H_0) <= alpha
pow_cnstr <- Power(datadist,prior) >= min_power
ess <- ExpectedSampleSize(datadist,prior)
init_onestage <- OneStageDesign(100,2)
opt_onestage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_onestage)
opt_onestage$design
?get_initial_design
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("group-sequential","two-stage"),dist=datadist)
get_initial_design()
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
?minimize
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
smplsize_cnstr <- MaximumSampleSize()<=76
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
opt_twostage
evaluate(Power(datadist,H_0),opt_twostage$design)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_design)
evaluate(Power(datadist,H_0),opt_twostage$design)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
evaluate(Power(datadist,H_0),opt_twostage$design)
evaluate(Power(datadist,prior),opt_twostage$design)
alpha <- 0.025
datadist <- Normal(two_armed=TRUE)
H_0 <- PointMassPrior(.0,1)
prior <- PointMassPrior(0.5,1)
alpha <- 0.025
min_power <- 0.9
toer_cnstr <- Power(datadist,H_0) <= alpha
pow_cnstr <- Power(datadist,prior) >= min_power
ess <- ExpectedSampleSize(datadist,prior)
init_onestage <- OneStageDesign(100,2)
opt_onestage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_onestage)
opt_onestage$design
smplsize_cnstr <- MaximumSampleSize()<=93
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
evaluate(Power(datadist,prior),opt_twostage$design)
evaluate(Power(datadist,H_0),opt_twostage$design)
smplsize_cnstr <- MaximumSampleSize()<=105
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
evaluate(Power(datadist,H_0),opt_twostage$design)
evaluate(Power(datadist,prior),opt_twostage$design)
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("group-sequential"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
opt_twostage$design
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_design)
evaluate(MaximumSampleSize(),opt_twostage$design)
smplsize_cnstr <- MaximumSampleSize()<=90
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("group-sequential"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_design)
opt_twostage$design
evaluate(MaximumSampleSize(),opt_twostage$design)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
opt_twostage$design
evaluate(Power(datadist,H_0),opt_twostage$design)
evaluate(Power(datadist,prior),opt_twostage$design)
evaluate(ess,opt_twostage$design)
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
opt_twostage$design
evaluate(Power(datadist,H_0),opt_twostage$design)
smplsize_cnstr <- MaximumSampleSize()<=93
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
evaluate(Power(datadist,H_0),opt_twostage$design)
sim_pr_reject <- function(design, delta, dist) {
simdata <- adoptr::simulate(
design,
nsim  = 10^6,
dist  = dist,
theta = delta,
seed  = 42
)
return(list(
prob = mean(simdata$reject),
se   = sd(simdata$reject) / sqrt(nrow(simdata))
))
}
toer <- sim_pr_reject(opt_twostage,0.0,datadist)
toer <- sim_pr_reject(opt_twostage$design,0.0,datadist)
toer
smplsize_cnstr <- MaximumSampleSize()<=105
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
toer <- sim_pr_reject(opt_twostage$design,0.0,datadist)
toer
opt_twostage[["optimal"]]
opt_twostage[[1]]
opt_twostage[[1]]$design@n2_pivots
opt_twostage$design@n2_pivots
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_design)
opt_twostage$design@n2_pivots
smplsize_cnstr <- MaximumSampleSize()<=105
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
opt_twostage$design@n2_pivots
?TwoStageDesign
opt_twostage$design
opt_twostage$design@c2_pivots
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
init_design$design
init_design
init_design@n2_pivots
opt_twostage$design@c2_pivots
c2piv <- opt_twostage$design@c2_pivots
smplsize_cnstr <- MaximumSampleSize()<=105
init_design2 <- TwoStageDesign(n1=45,c1f=0.5,c1e=2.2,n2_pivots=c(60.5,56.3,56.2,50,39,34,33),c2_pivots=c2piv)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design2)
opt_twostage$design@c2_pivots
opt_twostage$design@n2_pivots
init_design2 <- TwoStageDesign(n1=45,c1f=0.5,c1e=2.2,n2_pivots=c(57,55.3,55.2,46,38,34,32),c2_pivots=c2piv)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design2)
opt_twostage$design@n2_pivots
opt_twostage
opt_twostage$nloptr_return
init_design2 <- TwoStageDesign(n1=43,c1f=0.1,c1e=2.3,n2_pivots=c(60,58,57.9,57,45,28,27),c2_pivots=c2piv)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design2)
opt_twostage$nloptr_return
opt_twostage$design@n2_pivots
summary(opt_twostage)
summary(opt_twostage$design)
evaluate(Power(datadist,H_0),opt_twostage$design)
evaluate(Power(datadist,prior),opt_twostage$design)
init_design2 <- TwoStageDesign(n1=43,c1f=0.1,c1e=2.3,n2_pivots=c(60,58,57.9,57,45,28,27),c2_pivots=c2piv)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr),initial_design = init_design2)
opt_twostage$design@n2_pivots
evaluate(Power(datadist,prior),opt_twostage$design)
evaluate(Power(datadist,H_0),opt_twostage$design)
?nloptr
smplsize_cnstr <- MaximumSampleSize()<=95
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
opt_twostage$nloptr_return
evaluate(Power(datadist,H_0),opt_twostage)
evaluate(Power(datadist,H_0),opt_twostage$design)
smplsize_cnstr <- MaximumSampleSize()<=110
init_design2 <- TwoStageDesign(n1=43,c1f=0.1,c1e=2.3,n2_pivots=c(60,58,57.9,57,45,28,27),c2_pivots=c2piv)
evaluate(Power(datadist,H_0),opt_twostage$design,optimization=TRUE)
?evaluate
devtools::load_all(C:/Users/c09/Documents/adoptr)
devtools::load_all("C:/Users/c09/Documents/adoptr")
installed.packages("devtools")
installe.packages("devtools")
install.packages("devtools")
devtools::load_all("C:/Users/c09/Documents/adoptr")
smplsize_cnstr <- MaximumSampleSize()<=95
init_design <- get_initial_design(0.5,alpha,1-min_power,type=c("two-stage"),dist=datadist)
opt_twostage <- minimize(ess,subject_to(toer_cnstr,pow_cnstr,smplsize_cnstr),initial_design = init_design)
res$solution
g_cnstr
g_cnstr(res$solution)
opts
res
subject_to
g_cnstr(res$solution)
g_cnstr(res$solution)[[1]]
format(g_cnstr(res$solution)[[1]],digits=20)
format(g_cnstr(res$solution)[[2]],digits=20)
?print.nloptr
nloptr.print.options
nloptr.print.options()
nloptr::nloptr.print.options()
nloptr::nloptr.get.default.options()
opts2 <- opts
opts2$tol_constraints_ineq <- 10^(-10)
res2 <- nloptr::nloptr(
x0          = tunable_parameters(initial_design),
lb          = tunable_parameters(lower_boundary_design),
ub          = tunable_parameters(upper_boundary_design),
eval_f      = f_obj,
eval_g_ineq = g_cnstr,
opts        = opts2,
...
)
opts2$tol_constraints_ineq <- rep(10^(-10),4)
res2 <- nloptr::nloptr(
x0          = tunable_parameters(initial_design),
lb          = tunable_parameters(lower_boundary_design),
ub          = tunable_parameters(upper_boundary_design),
eval_f      = f_obj,
eval_g_ineq = g_cnstr,
opts        = opts2,
...
)
g_cnstr(res$solution)
g_cnstr(res2$solution)
nloptr
?nloptr
